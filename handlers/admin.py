from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import aiosqlite

from keyboards.admin_kb import get_admin_menu, get_emoji_keyboard
from keyboards.user_kb import get_main_menu
from database import Database
from config import ADMIN_IDS, DOCUMENTS_PATH, DATABASE_PATH

router = Router()
db = Database()

# FSM States

class DeleteStates(StatesGroup):
    choosing_what_to_delete = State()
    choosing_category = State()
    choosing_package = State()
    confirming_deletion = State()
class AddCategoryStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_emoji = State()

class AddSubcategoryStates(StatesGroup):
    choosing_parent = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_emoji = State()

class AddPackageStates(StatesGroup):
    choosing_category = State()
    waiting_for_name = State()
    waiting_for_description = State()
    uploading_files = State()

class EditStates(StatesGroup):
    choosing_what_to_edit = State()
    choosing_category = State()
    choosing_package = State()
    entering_new_name = State()
    entering_new_description = State()
class DeleteStates(StatesGroup):
    choosing_what_to_delete = State()
    choosing_category = State()
    choosing_package = State()
    confirming_deletion = State()
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await message.answer(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )

@router.callback_query(F.data == "admin_close")
async def close_admin(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    await callback.message.delete()
    await callback.answer()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===

@router.callback_query(F.data == "admin_add_category")
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddCategoryStates.waiting_for_name)
    await callback.answer()

@router.message(AddCategoryStates.waiting_for_name)
async def process_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(AddCategoryStates.waiting_for_description)

@router.message(AddCategoryStates.waiting_for_description)
async def process_category_description(message: Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(description=message.text)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_emoji_keyboard()
    )
    await state.set_state(AddCategoryStates.waiting_for_emoji)

@router.callback_query(AddCategoryStates.waiting_for_emoji, F.data.startswith("emoji_"))
async def process_category_emoji(callback: CallbackQuery, state: FSMContext):
    emoji = callback.data.replace("emoji_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    data = await state.get_data()
    
    category_id = await db.create_category(
        name=data['name'],
        emoji=emoji,
        description=data.get('description'),
        parent_id=None
    )
    
    await callback.message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{emoji} {data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
    )
    
    await state.clear()
    await callback.answer()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò ===

@router.callback_query(F.data == "admin_add_subcategory")
async def start_add_subcategory(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    categories = await db.get_root_categories()
    
    if not categories:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        await callback.answer()
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for cat_id, name, emoji in categories:
        keyboard.append([InlineKeyboardButton(
            text=f"{emoji} {name}",
            callback_data=f"addsubcat_parent_{cat_id}"
        )])
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(AddSubcategoryStates.choosing_parent)
    await callback.answer()

@router.callback_query(AddSubcategoryStates.choosing_parent, F.data.startswith("addsubcat_parent_"))
async def process_subcategory_parent(callback: CallbackQuery, state: FSMContext):
    parent_id = int(callback.data.split("_")[2])
    await state.update_data(parent_id=parent_id)
    
    cat_info = await db.get_category_info(parent_id)
    
    await callback.message.answer(
        f"–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–Ω—É—Ç—Ä–∏ '{cat_info['emoji']} {cat_info['name']}'\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    await state.set_state(AddSubcategoryStates.waiting_for_name)
    await callback.answer()

@router.message(AddSubcategoryStates.waiting_for_name)
async def process_subcategory_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ /skip):")
    await state.set_state(AddSubcategoryStates.waiting_for_description)

@router.message(AddSubcategoryStates.waiting_for_description)
async def process_subcategory_description(message: Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(description=message.text)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_emoji_keyboard()
    )
    await state.set_state(AddSubcategoryStates.waiting_for_emoji)

@router.callback_query(AddSubcategoryStates.waiting_for_emoji, F.data.startswith("emoji_"))
async def process_subcategory_emoji(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if 'parent_id' in data:
        emoji = callback.data.replace("emoji_", "")
        
        category_id = await db.create_category(
            name=data['name'],
            emoji=emoji,
            description=data.get('description'),
            parent_id=data['parent_id']
        )
        
        parent_info = await db.get_category_info(data['parent_id'])
        
        await callback.message.answer(
            f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{emoji} {data['name']}' —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ "
            f"'{parent_info['emoji']} {parent_info['name']}'!"
        )
        
        await state.clear()
        await callback.answer()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ê–ö–ï–¢–ê ===

@router.callback_query(F.data == "admin_add_package")
async def start_add_package(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    categories = await db.get_root_categories()
    
    if not categories:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        await callback.answer()
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for cat_id, name, emoji in categories:
        keyboard.append([InlineKeyboardButton(
            text=f"{emoji} {name}",
            callback_data=f"addpack_cat_{cat_id}"
        )])
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(AddPackageStates.choosing_category)
    await callback.answer()

@router.callback_query(AddPackageStates.choosing_category, F.data.startswith("addpack_cat_"))
async def process_package_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = await db.get_subcategories(category_id)
    
    if subcategories:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = []
        
        for subcat_id, name, emoji in subcategories:
            keyboard.append([InlineKeyboardButton(
                text=f"{emoji} {name}",
                callback_data=f"addpack_cat_{subcat_id}"
            )])
        
        cat_info = await db.get_category_info(category_id)
        keyboard.append([InlineKeyboardButton(
            text=f"‚¨ÜÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–∞–∫–µ—Ç –≤ '{cat_info['name']}'",
            callback_data=f"addpack_here_{category_id}"
        )])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–∫–µ—Ç –∑–¥–µ—Å—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await state.update_data(category_id=category_id)
        path = await db.get_category_path(category_id)
        path_text = " ‚Üí ".join(path)
        
        await callback.message.answer(
            f"–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–∞–∫–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{path_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:"
        )
        await state.set_state(AddPackageStates.waiting_for_name)
    
    await callback.answer()

@router.callback_query(F.data.startswith("addpack_here_"))
async def create_package_here(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(category_id=category_id)
    
    path = await db.get_category_path(category_id)
    path_text = " ‚Üí ".join(path)
    
    await callback.message.answer(
        f"–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–∞–∫–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{path_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:"
    )
    await state.set_state(AddPackageStates.waiting_for_name)
    await callback.answer()

@router.message(AddPackageStates.waiting_for_name)
async def process_package_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ (–∏–ª–∏ /skip):")
    await state.set_state(AddPackageStates.waiting_for_description)

@router.message(AddPackageStates.waiting_for_description)
async def process_package_description(message: Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(description=message.text)
    
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞–∫–µ—Ç–∞ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /done"
    )
    await state.update_data(files=[])
    await state.set_state(AddPackageStates.uploading_files)

@router.message(AddPackageStates.uploading_files, F.document)
async def process_package_files(message: Message, state: FSMContext, bot: Bot):
    file_id = message.document.file_id
    file_name = message.document.file_name
    file_size = message.document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 MB)")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_path = f"{DOCUMENTS_PATH}/{file_id}_{file_name}"
    
    os.makedirs(DOCUMENTS_PATH, exist_ok=True)
    await bot.download_file(file.file_path, file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    data = await state.get_data()
    files = data.get('files', [])
    files.append({
        'file_id': file_id,
        'filename': file_name,
        'file_path': file_path,
        'file_size': file_size,
        'file_type': file_name.split('.')[-1] if '.' in file_name else ''
    })
    await state.update_data(files=files)
    
    await message.answer(
        f"‚úÖ –§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done"
    )

@router.message(AddPackageStates.uploading_files, Command("done"))
async def finish_package_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    
    if not files:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
    package_id = await db.create_package(
        category_id=data['category_id'],
        name=data['name'],
        description=data.get('description')
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for file_info in files:
        await db.create_document(
            package_id=package_id,
            filename=file_info['filename'],
            file_path=file_info['file_path'],
            file_type=file_info['file_type'],
            file_id=file_info['file_id'],
            file_size=file_info['file_size']
        )
    
    path = await db.get_category_path(data['category_id'])
    path_text = " ‚Üí ".join(path)
    
    await message.answer(
        f"‚úÖ –ü–∞–∫–µ—Ç '{data['name']}' —Å–æ–∑–¥–∞–Ω —Å {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!\n\n"
        f"–ü—É—Ç—å: {path_text} ‚Üí {data['name']}"
    )
    
    await state.clear()

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ===

@router.callback_query(F.data == "admin_edit")
async def start_edit(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="edit_category")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç", callback_data="edit_package")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    
    await callback.message.edit_text(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===

@router.callback_query(F.data == "edit_category")
async def choose_category_to_edit(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏ –∫–æ—Ä–Ω–µ–≤—ã–µ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    all_categories = []
    
    # –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–Ω–µ–≤—ã–µ
    root_cats = await db.get_root_categories()
    for cat_id, name, emoji in root_cats:
        all_categories.append((cat_id, name, emoji, 0))
        
        # –ü–æ—Ç–æ–º –∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcats = await db.get_subcategories(cat_id)
        for sub_id, sub_name, sub_emoji in subcats:
            all_categories.append((sub_id, sub_name, sub_emoji, 1))
    
    if not all_categories:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        await callback.answer()
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    
    for cat_id, name, emoji, level in all_categories:
        prefix = "  " * level  # –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard.append([InlineKeyboardButton(
            text=f"{prefix}{emoji} {name}",
            callback_data=f"editcat_{cat_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(EditStates.choosing_category)
    await callback.answer()

@router.callback_query(EditStates.choosing_category, F.data.startswith("editcat_"))
async def edit_category_menu(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(category_id=category_id)
    
    cat_info = await db.get_category_info(category_id)
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="editcat_name")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="editcat_desc")],
        [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data="editcat_emoji")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    
    desc_text = cat_info['description'] if cat_info['description'] else "–Ω–µ—Ç"
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"{cat_info['emoji']} {cat_info['name']}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc_text}\n\n"
        f"–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "editcat_name")
async def edit_category_name_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(EditStates.entering_new_name)
    await state.update_data(edit_type="category_name")
    await callback.answer()

@router.message(EditStates.entering_new_name)
async def process_new_name(message: Message, state: FSMContext):
    data = await state.get_data()
    
    if data.get('edit_type') == "category_name":
        async with aiosqlite.connect(DATABASE_PATH) as db_conn:
            await db_conn.execute(
                "UPDATE Categories SET name = ? WHERE id = ?",
                (message.text, data['category_id'])
            )
            await db_conn.commit()
        
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{message.text}'!")
        await state.clear()
    
    elif data.get('edit_type') == "package_name":
        async with aiosqlite.connect(DATABASE_PATH) as db_conn:
            await db_conn.execute(
                "UPDATE Packages SET name = ? WHERE id = ?",
                (message.text, data['package_id'])
            )
            await db_conn.commit()
        
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{message.text}'!")
        await state.clear()

@router.callback_query(F.data == "editcat_desc")
async def edit_category_desc_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
    await state.set_state(EditStates.entering_new_description)
    await state.update_data(edit_type="category_desc")
    await callback.answer()

@router.message(EditStates.entering_new_description)
async def process_new_description(message: Message, state: FSMContext):
    data = await state.get_data()
    new_desc = None if message.text == "/skip" else message.text
    
    if data.get('edit_type') == "category_desc":
        async with aiosqlite.connect(DATABASE_PATH) as db_conn:
            await db_conn.execute(
                "UPDATE Categories SET description = ? WHERE id = ?",
                (new_desc, data['category_id'])
            )
            await db_conn.commit()
        
        if new_desc:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        else:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ!")
        await state.clear()
    
    elif data.get('edit_type') == "package_desc":
        async with aiosqlite.connect(DATABASE_PATH) as db_conn:
            await db_conn.execute(
                "UPDATE Packages SET description = ? WHERE id = ?",
                (new_desc, data['package_id'])
            )
            await db_conn.commit()
        
        if new_desc:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        else:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–æ!")
        await state.clear()

@router.callback_query(F.data == "editcat_emoji")
async def edit_category_emoji_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_emoji_keyboard()
    )
    await state.update_data(edit_type="category_emoji")
    await callback.answer()

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ê ===

@router.callback_query(F.data == "edit_package")
async def choose_package_to_edit(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_packages = []
    
    async with aiosqlite.connect(DATABASE_PATH) as db_conn:
        cursor = await db_conn.execute("""
            SELECT p.id, p.name, c.name, c.emoji 
            FROM Packages p
            JOIN Categories c ON p.category_id = c.id
            ORDER BY c.name, p.name
        """)
        rows = await cursor.fetchall()
        for row in rows:
            all_packages.append(row)
    
    if not all_packages:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        await callback.answer()
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    
    for pack_id, pack_name, cat_name, cat_emoji in all_packages:
        keyboard.append([InlineKeyboardButton(
            text=f"üì¶ {pack_name} (–≤ {cat_emoji} {cat_name})",
            callback_data=f"editpack_{pack_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(EditStates.choosing_package)
    await callback.answer()

@router.callback_query(EditStates.choosing_package, F.data.startswith("editpack_"))
async def edit_package_menu(callback: CallbackQuery, state: FSMContext):
    package_id = int(callback.data.split("_")[1])
    await state.update_data(package_id=package_id)
    
    pack_info = await db.get_package_info(package_id)
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="editpack_name")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="editpack_desc")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    
    desc_text = pack_info['description'] if pack_info['description'] else "–Ω–µ—Ç"
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:\n"
        f"üì¶ {pack_info['name']}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc_text}\n\n"
        f"–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "editpack_name")
async def edit_package_name_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:")
    await state.set_state(EditStates.entering_new_name)
    await state.update_data(edit_type="package_name")
    await callback.answer()

@router.callback_query(F.data == "editpack_desc")
async def edit_package_desc_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ (–∏–ª–∏ /skip —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
    await state.set_state(EditStates.entering_new_description)
    await state.update_data(edit_type="package_desc")
    await callback.answer()

@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )
    await callback.answer()

# === –£–î–ê–õ–ï–ù–ò–ï ===

@router.callback_query(F.data == "admin_delete")
async def start_delete(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç", callback_data="delete_package")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

# === –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===

@router.callback_query(F.data == "delete_category")
async def choose_category_to_delete(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    all_categories = await db.get_all_categories_with_subcategories()

    if not all_categories:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for cat_id, name, emoji, level in all_categories:
        prefix = "  " * level
        keyboard.append([InlineKeyboardButton(
            text=f"{prefix}{emoji} {name}",
            callback_data=f"delcat_{cat_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–∞–∫–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DeleteStates.choosing_category)
    await callback.answer()

@router.callback_query(DeleteStates.choosing_category, F.data.startswith("delcat_"))
async def confirm_category_deletion(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(category_id=category_id)

    cat_info = await db.get_category_info(category_id)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    has_subcats = await db.has_subcategories(category_id)
    has_packages = await db.has_packages(category_id)

    warning = f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{cat_info['emoji']} {cat_info['name']}\n\n"
    if has_subcats or has_packages:
        warning += "–í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã:\n"
        if has_subcats:
            warning += "- –í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        if has_packages:
            warning += "- –í—Å–µ –ø–∞–∫–µ—Ç—ã –∏ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"

    warning += "\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_category")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        warning,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DeleteStates.confirming_deletion)
    await callback.answer()

@router.callback_query(DeleteStates.confirming_deletion, F.data == "confirm_delete_category")
async def execute_category_deletion(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data['category_id']

    cat_info = await db.get_category_info(category_id)

    try:
        await db.delete_category(category_id)
        await callback.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_info['emoji']} {cat_info['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    await state.clear()
    await callback.answer()

# === –£–î–ê–õ–ï–ù–ò–ï –ü–ê–ö–ï–¢–ê ===

@router.callback_query(F.data == "delete_package")
async def choose_package_to_delete(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    all_packages = await db.get_all_packages()

    if not all_packages:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for pack_id, pack_name, cat_name, cat_emoji in all_packages:
        keyboard.append([InlineKeyboardButton(
            text=f"üì¶ {pack_name} (–≤ {cat_emoji} {cat_name})",
            callback_data=f"delpack_{pack_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DeleteStates.choosing_package)
    await callback.answer()

@router.callback_query(DeleteStates.choosing_package, F.data.startswith("delpack_"))
async def confirm_package_deletion(callback: CallbackQuery, state: FSMContext):
    package_id = int(callback.data.split("_")[1])
    await state.update_data(package_id=package_id)

    pack_info = await db.get_package_info(package_id)
    documents = await db.get_package_documents(package_id)

    warning = f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç:\nüì¶ {pack_info['name']}\n\n"
    warning += f"–í –ø–∞–∫–µ—Ç–µ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    warning += "\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_package")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        warning,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(DeleteStates.confirming_deletion)
    await callback.answer()

@router.callback_query(DeleteStates.confirming_deletion, F.data == "confirm_delete_package")
async def execute_package_deletion(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    package_id = data['package_id']

    pack_info = await db.get_package_info(package_id)

    try:
        await db.delete_package(package_id)
        await callback.message.edit_text(
            f"‚úÖ –ü–∞–∫–µ—Ç 'üì¶ {pack_info['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    await state.clear()
    await callback.answer()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò ===

class ManageDocsStates(StatesGroup):
    choosing_action = State()
    choosing_package = State()
    choosing_document = State()
    uploading_new_file = State()
    uploading_additional_files = State()

@router.callback_query(F.data == "admin_manage_docs")
async def start_manage_docs(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="managedoc_replace")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–∫–µ—Ç", callback_data="managedoc_add")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="managedoc_delete")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]

    await callback.message.edit_text(
        "üìé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

# === –ó–ê–ú–ï–ù–ê –î–û–ö–£–ú–ï–ù–¢–ê ===

@router.callback_query(F.data == "managedoc_replace")
async def choose_package_for_replace(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    all_packages = await db.get_all_packages()

    if not all_packages:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for pack_id, pack_name, cat_name, cat_emoji in all_packages:
        keyboard.append([InlineKeyboardButton(
            text=f"üì¶ {pack_name} (–≤ {cat_emoji} {cat_name})",
            callback_data=f"replacepack_{pack_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ManageDocsStates.choosing_package)
    await state.update_data(action="replace")
    await callback.answer()

@router.callback_query(ManageDocsStates.choosing_package, F.data.startswith("replacepack_"))
async def choose_document_to_replace(callback: CallbackQuery, state: FSMContext):
    package_id = int(callback.data.split("_")[1])
    await state.update_data(package_id=package_id)

    documents = await db.get_package_documents(package_id)

    if not documents:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for doc in documents:
        keyboard.append([InlineKeyboardButton(
            text=f"üìÑ {doc['filename']}",
            callback_data=f"replacedoc_{doc['id']}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ManageDocsStates.choosing_document)
    await callback.answer()

@router.callback_query(ManageDocsStates.choosing_document, F.data.startswith("replacedoc_"))
async def request_new_file(callback: CallbackQuery, state: FSMContext):
    doc_id = int(callback.data.split("_")[1])
    await state.update_data(doc_id=doc_id)

    doc_info = await db.get_document_info(doc_id)

    await callback.message.answer(
        f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã:\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {doc_info['filename']}"
    )
    await state.set_state(ManageDocsStates.uploading_new_file)
    await callback.answer()

@router.message(ManageDocsStates.uploading_new_file, F.document)
async def process_replacement_file(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    doc_id = data['doc_id']

    file_id = message.document.file_id
    file_name = message.document.file_name
    file_size = message.document.file_size

    if file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 MB)")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
    old_doc_info = await db.get_document_info(doc_id)
    if old_doc_info and old_doc_info['file_path']:
        try:
            os.remove(old_doc_info['file_path'])
        except:
            pass

    # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_path = f"{DOCUMENTS_PATH}/{file_id}_{file_name}"

    os.makedirs(DOCUMENTS_PATH, exist_ok=True)
    await bot.download_file(file.file_path, file_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
    async with aiosqlite.connect(DATABASE_PATH) as db_conn:
        await db_conn.execute(
            "UPDATE Documents SET filename = ?, file_path = ?, file_type = ?, file_id = ?, file_size = ? WHERE id = ?",
            (file_name, file_path, file_name.split('.')[-1] if '.' in file_name else '', file_id, file_size, doc_id)
        )
        await db_conn.commit()

    await message.answer(
        f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω!\n"
        f"–ù–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}"
    )
    await state.clear()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–û–í –í –ü–ê–ö–ï–¢ ===

@router.callback_query(F.data == "managedoc_add")
async def choose_package_for_add(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    all_packages = await db.get_all_packages()

    if not all_packages:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for pack_id, pack_name, cat_name, cat_emoji in all_packages:
        keyboard.append([InlineKeyboardButton(
            text=f"üì¶ {pack_name} (–≤ {cat_emoji} {cat_name})",
            callback_data=f"addtopack_{pack_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ManageDocsStates.choosing_package)
    await state.update_data(action="add")
    await callback.answer()

@router.callback_query(ManageDocsStates.choosing_package, F.data.startswith("addtopack_"))
async def request_additional_files(callback: CallbackQuery, state: FSMContext):
    package_id = int(callback.data.split("_")[1])
    await state.update_data(package_id=package_id, files=[])

    pack_info = await db.get_package_info(package_id)

    await callback.message.answer(
        f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫–µ—Ç:\n"
        f"üì¶ {pack_info['name']}\n\n"
        f"–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /done"
    )
    await state.set_state(ManageDocsStates.uploading_additional_files)
    await callback.answer()

@router.message(ManageDocsStates.uploading_additional_files, F.document)
async def process_additional_files(message: Message, state: FSMContext, bot: Bot):
    file_id = message.document.file_id
    file_name = message.document.file_name
    file_size = message.document.file_size

    if file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 MB)")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_path = f"{DOCUMENTS_PATH}/{file_id}_{file_name}"

    os.makedirs(DOCUMENTS_PATH, exist_ok=True)
    await bot.download_file(file.file_path, file_path)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    data = await state.get_data()
    files = data.get('files', [])
    files.append({
        'file_id': file_id,
        'filename': file_name,
        'file_path': file_path,
        'file_size': file_size,
        'file_type': file_name.split('.')[-1] if '.' in file_name else ''
    })
    await state.update_data(files=files)

    await message.answer(
        f"‚úÖ –§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done"
    )

@router.message(ManageDocsStates.uploading_additional_files, Command("done"))
async def finish_adding_documents(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    package_id = data['package_id']

    if not files:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for file_info in files:
        await db.create_document(
            package_id=package_id,
            filename=file_info['filename'],
            file_path=file_info['file_path'],
            file_type=file_info['file_type'],
            file_id=file_info['file_id'],
            file_size=file_info['file_size']
        )

    pack_info = await db.get_package_info(package_id)

    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç '{pack_info['name']}'!"
    )

    await state.clear()

# === –£–î–ê–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê ===

@router.callback_query(F.data == "managedoc_delete")
async def choose_package_for_delete_doc(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    all_packages = await db.get_all_packages()

    if not all_packages:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for pack_id, pack_name, cat_name, cat_emoji in all_packages:
        keyboard.append([InlineKeyboardButton(
            text=f"üì¶ {pack_name} (–≤ {cat_emoji} {cat_name})",
            callback_data=f"delpackdoc_{pack_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ManageDocsStates.choosing_package)
    await state.update_data(action="delete")
    await callback.answer()

@router.callback_query(ManageDocsStates.choosing_package, F.data.startswith("delpackdoc_"))
async def choose_document_to_delete(callback: CallbackQuery, state: FSMContext):
    package_id = int(callback.data.split("_")[1])
    await state.update_data(package_id=package_id)

    documents = await db.get_package_documents(package_id)

    if not documents:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []

    for doc in documents:
        keyboard.append([InlineKeyboardButton(
            text=f"üìÑ {doc['filename']}",
            callback_data=f"deldoc_{doc['id']}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ManageDocsStates.choosing_document)
    await callback.answer()

@router.callback_query(ManageDocsStates.choosing_document, F.data.startswith("deldoc_"))
async def execute_document_deletion(callback: CallbackQuery, state: FSMContext):
    doc_id = int(callback.data.split("_")[1])

    doc_info = await db.get_document_info(doc_id)

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if doc_info and doc_info['file_path']:
            try:
                os.remove(doc_info['file_path'])
            except:
                pass

        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        await db.delete_document(doc_id)

        await callback.message.edit_text(
            f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{doc_info['filename']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    await state.clear()
    await callback.answer()

# === –û–¢–ú–ï–ù–ê ===

@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")