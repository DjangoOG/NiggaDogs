from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram import Bot

from keyboards.user_kb import get_main_menu, get_category_content, get_package_keyboard
from database import Database

router = Router()
db = Database()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–∑—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=await get_main_menu()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "üìÅ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "üì¶ - –ø–∞–∫–µ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
        "üìÑ - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=await get_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("cat_"))
async def show_category(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_info = await db.get_category_info(category_id)
    if not category_info:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    category_name = f"{category_info['emoji']} {category_info['name']}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"{category_name}\n"
    if category_info['description']:
        text += f"\n{category_info['description']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–∞–∫–µ—Ç—ã
    has_subcats = await db.has_subcategories(category_id)
    has_packages = await db.has_packages(category_id)
    
    if has_subcats and has_packages:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–∞–∫–µ—Ç:"
    elif has_subcats:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    elif has_packages:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:"
    else:
        text += "\n‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    
    await callback.message.edit_text(
        text,
        reply_markup=await get_category_content(category_id, category_info['parent_id'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pack_"))
async def show_package(callback: CallbackQuery):
    package_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
    package_info = await db.get_package_info(package_id)
    if not package_info:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üì¶ –ü–∞–∫–µ—Ç: {package_info['name']}\n"
    if package_info['description']:
        text += f"\n{package_info['description']}\n"
    
    text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:"
    
    await callback.message.edit_text(
        text,
        reply_markup=await get_package_keyboard(package_id, package_info['category_id'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("doc_"))
async def send_document(callback: CallbackQuery, bot: Bot):
    doc_id = int(callback.data.split("_")[1])
    doc_info = await db.get_document_info(doc_id)
    
    if not doc_info:
        await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status_msg = await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if doc_info['file_id']:
            await bot.send_document(
                callback.from_user.id,
                doc_info['file_id'],
                caption=f"üìÑ {doc_info['filename']}"
            )
        else:
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            with open(doc_info['file_path'], 'rb') as file:
                sent_msg = await bot.send_document(
                    callback.from_user.id,
                    file,
                    caption=f"üìÑ {doc_info['filename']}"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
                file_id = sent_msg.document.file_id
                await db.update_document_file_id(doc_id, file_id)
        
        await status_msg.delete()
        await callback.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)